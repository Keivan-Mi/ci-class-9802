# -*- coding: utf-8 -*-
"""CarPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ZgipbPFE9KzpxhZ387u0xtj25meU3HS
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras import models
# %matplotlib inline 
sns.set(color_codes=True)

df = pd.read_csv('/content/CARS.csv')
df = df.drop(['Model','DriveTrain','Invoice','Origin','Type'], axis=1)
df = df.dropna()
df.head(5)
df.info()

df.describe()

df.isna().sum()
df['MSRP'] = df['MSRP'].str.replace('$','').str.replace(',','').astype(float)
df['Horsepower'] = df['Horsepower'].astype(float)
df['MPG_City'] = df['MPG_City'].astype(float)
df['MPG_Highway'] = df['MPG_Highway'].astype(float)
df['Weight'] = df['Weight'].astype(float)
df['Wheelbase'] = df['Wheelbase'].astype(float)
df['Length'] = df['Length'].astype(float)
df.dtypes

df = pd.get_dummies(df, prefix='', prefix_sep='')
df.head(10)

train_df = df.sample(frac=0.8,random_state=0)
test_df = df.drop(train_df.index)
train_label = train_df.pop('MSRP')
test_label = test_df.pop('MSRP')
print(len(train_df.keys()))

from sklearn.preprocessing import RobustScaler

scaler = RobustScaler()
train_df = scaler.fit(train_df).transform(train_df)
test_df = scaler.fit(test_df).transform(test_df)

model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=[46]),
    layers.Dense(32, activation='relu'),
    layers.Dense(8, activation='relu'),
    layers.Dense(1)
  ])

optimizer = tf.keras.optimizers.RMSprop(0.001)

model.compile(loss='mse',
                optimizer=optimizer,
                metrics=['mae', 'mse'])
model.summary()

EPOCHS = 800
history = model.fit(
  train_df, train_label, batch_size=64, shuffle=True,
  epochs=EPOCHS, validation_split = 0.2, verbose=0)

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()

loss, mae, mse = model.evaluate(test_df, test_label, verbose=2)

test_predictions = model.predict(test_df).flatten()

plt.figure(figsize= (6, 6))
plt.title('Visualizing the Regression')
sns.regplot(test_label, test_predictions, color = 'teal')
plt.xlabel('True Values')
plt.ylabel('Predictions')
plt.show()

from sklearn.metrics import r2_score
print('The R2 square value of NN is :', r2_score(test_label, test_predictions)*100)

